<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Test Design on</title><link>https://associationforsoftwaretesting.github.io/whose/docs/test-design/</link><description>Recent content in Test Design on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 02 Nov 2014 18:50:00 +0000</lastBuildDate><atom:link href="https://associationforsoftwaretesting.github.io/whose/docs/test-design/index.xml" rel="self" type="application/rss+xml"/><item><title>Identifying and Using Oracles</title><link>https://associationforsoftwaretesting.github.io/whose/docs/test-design/identifying-and-using-oracles/</link><pubDate>Sun, 02 Nov 2014 18:56:00 +0000</pubDate><guid>https://associationforsoftwaretesting.github.io/whose/docs/test-design/identifying-and-using-oracles/</guid><description>Definition: #
An Oracle is a principle or mechanism by which we recognize a problem. It is a special kind of heuristic that helps us to make a particular decision in answer to the question, &amp;ldquo;Is there a problem here?&amp;rdquo; as defined by Michael Bolton.
A context where I used this skill: #
I had just joined a medium size software development company, in a team of 3 testers and 15 developers.</description></item><item><title>Quick Attacks</title><link>https://associationforsoftwaretesting.github.io/whose/docs/test-design/quick-attacks/</link><pubDate>Sun, 02 Nov 2014 19:16:00 +0000</pubDate><guid>https://associationforsoftwaretesting.github.io/whose/docs/test-design/quick-attacks/</guid><description>Definition: #
Quick attacks are a collection of methods that you can use to begin testing immediately, without much understanding of what software is supposed to do or the underlying business requirements. Most quick attacks are broad and shallow, based more on the commonly-known ways a platform can fail than any knowledge of the underlying application. Examples of quick attacks include putting numbers too large, too small, or too precise in text fields, entering numbers where text is expected, and so on -- forcing what seems like exceptions to the usual process to see if the programmer wrote code to handle those exceptions.</description></item><item><title>Black Box Techniques</title><link>https://associationforsoftwaretesting.github.io/whose/docs/test-design/black-box-techniques/</link><pubDate>Fri, 10 Apr 2015 17:07:00 +0000</pubDate><guid>https://associationforsoftwaretesting.github.io/whose/docs/test-design/black-box-techniques/</guid><description>Definition: #
Black box testing is a general label applied to design techniques used when the tester/test designer does not know or does not take into account, the software&amp;rsquo;s code, design, or other aspects of its structure.
A context where I used this skill: #
Pretty much any test effort where I was not directly involved in development, I was doing some form of black box testing.
In one case, I was testing rockets.</description></item><item><title>White Box Techniques</title><link>https://associationforsoftwaretesting.github.io/whose/docs/test-design/white-box-techniques/</link><pubDate>Fri, 10 Apr 2015 17:08:00 +0000</pubDate><guid>https://associationforsoftwaretesting.github.io/whose/docs/test-design/white-box-techniques/</guid><description>Definition: #
White Box Testing is a general label applied to design techniques used when the tester/test designer knows and takes into account the software&amp;rsquo;s code, design, and other aspects of its structure. This is not a properly a skill. It is a label for techniques that incorporate many skills within the broader skill of designing meaningful tests.
A context where I used this skill: #
When I was a developer &amp;mdash; tester (now called an Agile developer), I iteratively built design, code, and test information.</description></item><item><title>Risk Prioritization</title><link>https://associationforsoftwaretesting.github.io/whose/docs/test-design/risk-prioritization/</link><pubDate>Fri, 10 Apr 2015 16:49:00 +0000</pubDate><guid>https://associationforsoftwaretesting.github.io/whose/docs/test-design/risk-prioritization/</guid><description>Definition: #
The process of &amp;lsquo;creating&amp;rsquo; a list with identified and analyzed risk items which is ordered on its risk exposure. See also the following related sections in this documents:
Classify the impact of the risk (e.g. High, Medium, Low) Classify the probability of the risk (e.g. High, Medium, Low) Perform criticality ordering of the composite risk list , e.g. High severity and High probability would be tested, while a Low severity and low probability would not be tested A context where I used this skill: #
I used this during the test impact, when I created a list with identified and analyzed risk items.</description></item><item><title>Identifying Combinatorial Explosion</title><link>https://associationforsoftwaretesting.github.io/whose/docs/test-design/identifying-combinatorial-explosion/</link><pubDate>Thu, 20 Nov 2014 15:00:00 +0000</pubDate><guid>https://associationforsoftwaretesting.github.io/whose/docs/test-design/identifying-combinatorial-explosion/</guid><description>Definition: #
The combinatorial explosion is the list of potential test ideas based on some model of the system. Combination testing is about picking a few tests that can teach us what we need to know about the space of combinations of these variables.
A context where I used this skill: #
Recently, while working on a project that involved a table change to add new languages available as &amp;ldquo;preferred languages&amp;rdquo; in a registration module for a shopping system we saw several potential problems.</description></item><item><title>Establishing Test Objectives</title><link>https://associationforsoftwaretesting.github.io/whose/docs/test-design/establishing-test-objectives/</link><pubDate>Fri, 21 Nov 2014 22:04:00 +0000</pubDate><guid>https://associationforsoftwaretesting.github.io/whose/docs/test-design/establishing-test-objectives/</guid><description>Definition: #
Test objectives are the types of information we wish to learn about the software we are going to test.
A context where I used this skill: #
The challenge is to understand what the stakeholders are aware of and how their understanding may be self-limiting. We as testers need to be aware of more than the simple, easy to define things we can provide to them. We need to understand their needs at least as well as theirs so we can explain what the implications of each &amp;ldquo;objective&amp;rdquo; is.</description></item></channel></rss>