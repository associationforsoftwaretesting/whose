var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/management/developing-a-test-strategy/",title:"Developing a Test Strategy",description:`Definition: #Selecting test methodologies based on available resources that will be applied within the context of a specific project.
The development of testing strategy for a project starts with the mission, that defines the goal of testing activities for a specific project stage, and identifying the risks for this specific project stage. The next step is to analyse all available resources: people skills, tools, and time. The resources will be driving selection of test methodologies.`,content:`Definition: #Selecting test methodologies based on available resources that will be applied within the context of a specific project.
The development of testing strategy for a project starts with the mission, that defines the goal of testing activities for a specific project stage, and identifying the risks for this specific project stage. The next step is to analyse all available resources: people skills, tools, and time. The resources will be driving selection of test methodologies. The final step is to discuss the strategy with stakeholders, and revisit the strategy when the project requirements, dates or resources change. A context where I used this skill: #I used this skill continuously as a Test/QA Lead and QA Manager.
Here is an example:
I was working in a financial services company, and we started developing a new web product. This product was new for us but not unique on the market, and the business stakeholders needed some feedback from customers whether they will be using it. The goal for our product development team was to create a working product ASAP, with the minimal, but fully working features and the unique interface. Differentiating factor for this product was the usability and attractive interface, on top of functioning features. This product was intended for two-three clients.
The context analysis:
Project stage: development of robust, while non-scalable product (in prototype mode, so that features could be easily tweaked). This product was intended for 2-3 clients. Process: agile development, discovering requirements as we go. Such process is acceptable with the brand new products, which are entering uncharted waters. Project risks: building a product with financial features which show wrong data, non-intuitive interface, too late to market. Available resources: one tester, several developers, and one business analyst on the team. Whole company that is curious to learn about new product. The strategy:
A lot of exploratory testing: new frequently changing functions and interface, defined formulas for financial calculations. This tester was an expert in ET, and such testing provided most timely feedback to programmers. A choice to not use test automation. Reason: the product was not validated with customers, and was built in prototype mode. Both these reasons indicated that the team was developing a throwaway code and the project could end after initial validation with customers. A choice to not conduct load testing. Reason: the product was built for limited amount of users. A choice to limit testing to a specific browser version. This strategy was discussed with stakeholders, who agreed to such limitation in order to cut on time to market. Business announced this browser version to the intended customers, who were preselected for the initial feedback. The dilemma was with validating usability. To reiterate: usability was major differentiating factor for this product, it expected to set us aside from competitors. One tester on a team, however experienced, could form a biased opinion on product usability. The same bias was observed with programmers, who didn\u0026rsquo;t notice potential \u0026ldquo;hard to use\u0026rdquo; features due to their own preferences. The strategy was to employ \u0026lsquo;focus groups\u0026rsquo; throughout the company, that were composed of company employees who wanted to have a first peek on the brand new product. The special exersizes were developed for \u0026lsquo;focus groups\u0026rsquo; in order to test the product usability in a friendly, non-stressful environment, simultaneously allowing participants to learn the product. Such exersizes were created in a way that allowed development team to observe how new users interact with the product, and change interface based on the observation and feedback. During the course of development, the new \u0026lsquo;pioneer\u0026rsquo; customer was added to the list. It turned out that the specific browser version we originally selected was incompatible with this customer\u0026rsquo;s operating system. The decision was to add another browser version to be tested. When the project was in its\u0026rsquo; final pre-production stage, programmers added several \u0026rsquo;nice to have\u0026rsquo; features, which significantly added to complexity of the code. As a result, the amount of new bugs drastically increased. Tester initiated the conversation where it was decided to shut down several features in order to preserve the robustness of the working code. How I\u0026rsquo;d recommend someone learn this skill: #Learning this skill involves integrity and critical thinking, and sharpens with experience. Here are some principles:
You have to be honest to yourself, to your team and your management that there is always definite amount of resources available. To reiterate, resources include people skills, tools and time. There is a possibility that people on your team want to learn a new skill/tool during the project; in this case, you need to a) add a learning curve and b) assign a coach/reviewer to this person. Both activities add to the time. You have to be very critical when identifying and analyzing the project risks. For that, you have to know your stakeholders, their needs for quality at this specific project stage, and which risks are critical for project success at each stage. For example, R\u0026amp;D project stage has entirely different risks than Release into Production project stage. You have to learn pros and cons (limitations) of each test methodology: being it test automation, exploratory testing, testing in production, unit testing/TDD, etc. You have to learn pros and cons (limitations) of various test tools for short term and long term goals, and be brave enough to switch to another method, if the tool doesn\u0026rsquo;t fulfill your project goals. You need to revisit your strategy often, as the project context changes continuously and unpredictably. Additional resources: #BBST Foundations Strategy Video 1 BBST Foundations Strategy Video 2 Heuristic Test Strategy Model by James Bach By: Anna Royzman
`}),e.add({id:1,href:"/docs/community/coaching/",title:"Coaching",description:`Definition: #When most people say \u0026lsquo;coaching\u0026rsquo;, they mean at least three concepts:
Teaching, which is done by a subject matter expert Facilitating a larger group to accomplish some goal Helping someone work through a problem or grow personally. Where a sports coach may need to know the game they are coaching and facilitate the team, a professional coach using the model from the International Coaching Federation may not;; they focus on the third part of the definition.`,content:`Definition: #When most people say \u0026lsquo;coaching\u0026rsquo;, they mean at least three concepts:
Teaching, which is done by a subject matter expert Facilitating a larger group to accomplish some goal Helping someone work through a problem or grow personally. Where a sports coach may need to know the game they are coaching and facilitate the team, a professional coach using the model from the International Coaching Federation may not;; they focus on the third part of the definition.
The ICF defines coaching this way: Coaching is partnering with individuals in a thought\u0026mdash;provoking and creative process that inspires them to maximize their personal and professional potential.
When we say \u0026rsquo;test coaching\u0026rsquo;, we typically mean all three, as well as the ability to flip between roles to know which is appropriate.
A context where I used this skill: #Years ago I was working with a tester based several time zones away. He was asking me for help on a project which was your large, international, waterfall story. The testing work was being done by a different team than was doing main development which was different than component development, which was different than integration test\u0026hellip; and most of those were on different continents. Several of the pieces had aggressive deadlines, some things were late already. Of the things that had been delivered, everything was either buggy, or at least the piece didn\u0026rsquo;t play well with each other. Because the teams spoke different languages to do the day\u0026mdash;to\u0026mdash;day work, each claimed their piece was working according to its specification, and the other team was the problem. My friend wanted to know what I thought. I told him my prediction of the future: The software would be buggy, and it would be late.
Not really rocket science, was it?
I think my friend knew things weren\u0026rsquo;t going to work, but he was still holding out hope for some sort of divine intervention, that management would magically cut scope, change the date, or in some other way charge in on a white horse and save the day. Recognizing that things weren\u0026rsquo;t working out was, for him the first step toward figuring out how he was going to respond to this reality, which was really the only thing he had under his control.
The next step was developing options \u0026mdash; things like transferring departments, changing roles, changing companies, blowing the whistle, or, perhaps, \u0026ldquo;keeping his head down and trying to stay out of trouble when people begin to realize the wheels are off the project. \u0026quot; For that part of the conversation I moved for telling to asking questions. Ultimately, he made some tough decisions, and today is living a much more satisfied professional life.
How I\u0026rsquo;d recommend someone learn this skill: #If we defined coaching as a mix of at least three skills along with skill to pick a \u0026ldquo;stance\u0026rdquo; \u0026mdash; to know which is appropriate for the audience \u0026mdash; then students can go learn all three of those skills.
I\u0026rsquo;d also recommend the person who wants to learn coaching start by being coached and observing what the coach does. James Bach and Anne-Marie Charett offer free Skype coaching through the Association For Software Testing, and MiagiDo is a free, non\u0026mdash;commercial, zero\u0026mdash;profit school for software testing that teaches excellence in testing through study, (test) exercise, and coaching.
Additional resources: #Becoming a Technical Leader , by Jerry Weinberg Coaching Software Testers , by A Eurostar Webinar, Anne\u0026mdash;Marie Charrett Why You Many Need An \u0026lsquo;Agile Coach\u0026rsquo; (Whatever That Is) , Matthew Heusser for cio.com In Pursuit of Coaching Excellence by Ann\u0026mdash;Marie Charrett By: Matthew Heusser
`}),e.add({id:2,href:"/docs/critical-thinking/modeling/",title:"Modeling",description:`Definition: #The ability to create a representation of another thing
A context where I used this skill: #Test modeling has been used in almost situation of software and system, including:
GUI modeling of a game app landing page Logic control flow of car engine controller Signature page (user and password) of a banking app for security testing Data input space of a numeric calculator program using combinatorial data test model (link to combinatorial skills?`,content:`Definition: #The ability to create a representation of another thing
A context where I used this skill: #Test modeling has been used in almost situation of software and system, including:
GUI modeling of a game app landing page Logic control flow of car engine controller Signature page (user and password) of a banking app for security testing Data input space of a numeric calculator program using combinatorial data test model (link to combinatorial skills?) Tester mental models System transaction flows and many others at both high (system) and low (code) levels. Do not use partial models if you are doing checking of requirements for verification.
The ability to use models in support of testing. Models can be mental, logical, pictures, language based, etc\u0026hellip; Modeling can be used to restrict the combination explosion of states and data that software can suffer which impacts the ability to test. Often the test will use this skill abstract aspects of the system or software into a simpler concept which is testable. This is done by selecting some aspect of the software such as the data inputs, logic, options, actions, risk, error, or some other element of the software. These become \u0026ldquo;abstract\u0026rdquo; representations of the concept, item, or software. This allows testers to better understand and reason about the model abstraction.
Models can be mental (in the testers head) or real (some representation expression). Mental models are perhaps of the context testers best friend. Mental models can be developed by exploratory actions, adhoc testing, history (testing of past systems or being a help desk person) or research (reading things such as user guides or talking with users). Mental models can be capture into lists, spreadsheets, or mind maps, but as these \u0026ldquo;tools\u0026rdquo; are used the mental model moves from purely mental to something more physical (real).
Real or physical models can be captured by many techniques. A few of these technique skills are captured in the following pages/links. A key concepts for this skill the using groupings, arrangements, layers, and/or abstraction to restrict the model and avoid state space expansion (explode). Real modeling skills use techniques to capture the interesting aspect of software into a notation that other people can understand and or use. In some cases the uses can include: test data generation, test case generation, coverage measurement, oracle generation, risk classification, test management, test planning, and other useful testing concepts.
In no case should a model used to support testing be assumed to be complete or correct. Remember G. Box \u0026ldquo;All models are wrong, some models are useful\u0026rdquo;.
How I\u0026rsquo;d recommend someone learn this skill: #This skill area is arranged in a tree hierarchy. Modeling is a general skill made up of sub skills and in some cases sub\u0026mdash;sub skills with supporting techniques. The reader should follow the links below for the details of these skills, support context stories, and references/learning materials. There are also general references to modeling provided in this document:
Approximation models \u0026mdash; math based State Model User Behavior Modeling (models for testing) System Dynamics Modeling (models for testing) Social System Dynamics (models for testing) Visual Models of Risk (for risk based testing) Black box and white box modeling (based in techniques to support testing) Test Process Modeling Test Mind Mapping Expressive representation languages: SysML and UML Modeling Tools Usage Additional resources: #The Art of Software Testing, Glendford Myers - this is a general book on software testing (the grandfather). It contains modeling concepts that every tester should know Black Box Software Testing, Boris Beizer - this books is a collection of state modeling concepts applied to specific black box problems areas Anne-Marie Charrett\u0026rsquo;s blog on modeling in software testing Practical Model Based Testing: A Tools Approach By: Jon Hagar
`}),e.add({id:3,href:"/docs/communication/asking-questions/",title:"Asking Questions",description:`Definition: #Questioning involves inquiry to construct models. Questioning to learn challenges, confirms or refutes hypotheses.
A context where I used this skill: #I recently used \u0026ldquo;questions to learn\u0026rdquo; as part of task analysis. I interviewed end users to learn how they did their job. I built storyboard models of the usage scenarios. I asked users open ended questions to share their recent work experiences. During the interviews I asked clarifying questions to confirm definitions and ensure I had a common understanding with the interviewee.`,content:`Definition: #Questioning involves inquiry to construct models. Questioning to learn challenges, confirms or refutes hypotheses.
A context where I used this skill: #I recently used \u0026ldquo;questions to learn\u0026rdquo; as part of task analysis. I interviewed end users to learn how they did their job. I built storyboard models of the usage scenarios. I asked users open ended questions to share their recent work experiences. During the interviews I asked clarifying questions to confirm definitions and ensure I had a common understanding with the interviewee. I reiterated the story in chronological order so that I could identify missing steps, gaps or incorrect ordering of activities. I asked questions about any objects identified. For example how was the object created, how was the object changed, who was responsible for the object. I ask questions about any actions identified in the story. I looked for omissions. I explored alternatives with some what it questions anchored on decision points and choices identified by the end users.
How I\u0026rsquo;d recommend someone learn this skill: #I suggest the first step is for testers to observe some interviews with end users for the purpose of describing workflows or usage scenarios. Review some articles about the subject, for example The Key to Good Interviewing by Robert Sabourin.
Literature on the topic of problem solving also offers insights into questioning to learn. How to Solve It: A New Aspect of Mathematical Method by G. Polya
I suggest that testers listen to recordings of interviews and critique them with experienced practitioners and perform interviews and then have the results reviewed with experienced practitioners and peers.
Additional resources: #Developing Questioning Skills, Karron G. Lewis, University of Texas Task Analysis Methods for Instructional Design, David H. Jonassen By: Rob Sabourin
`}),e.add({id:4,href:"/docs/time-management/knowing-when-to-stop/",title:"Knowing When to Stop",description:`Definition: #The testers ability to deliberately end a testing effort based on one or more completion criteria, knowing that their testing was good enough and that the value of additional testing is less than the value of some other alternate course of action.
A context where I used this skill: #One example of when the skill of \u0026ldquo;Knowing when to stop\u0026rdquo; testing was critical was the Rendez-Vous project. Rendez-Vous was a fixed delivery date business critical project.`,content:`Definition: #The testers ability to deliberately end a testing effort based on one or more completion criteria, knowing that their testing was good enough and that the value of additional testing is less than the value of some other alternate course of action.
A context where I used this skill: #One example of when the skill of \u0026ldquo;Knowing when to stop\u0026rdquo; testing was critical was the Rendez-Vous project. Rendez-Vous was a fixed delivery date business critical project. The Rendez-Vous product was used for patient scheduling at medical clinics. The product was delivered as shrink wrap desktop software. Rendez-Vous was developed using a blend of Visual C++ and Delphi technologies for a Windows based PC platform. We decided that the testing would be complete when we could walk through a set of twenty seven specific usage scenarios with defined data having resulting system behaviour validated by a group of selected subject matter experts.
Another example of using the skill of \u0026ldquo;knowing when to stop\u0026rdquo; testing was in bug confirmation testing. Jason, a tester in my team, was assigned the job of confirming developer bug fixes. Jason was concerned that programmers had accidentally broken something else when fixing the bug. The product under test was a desktop security suite running on Windows pcs. The bug confirmation testing took place frequently during the system test effort of a project following a waterfall like software development lifecycle model. Jason confirmed bugs with several steps:
Demonstrate bug existed in previous build Try same steps on the new build Imagine a scenario the user would experience which would have encountered the bug Demonstrate that the imagined scenario works acceptably Vary the steps and data in the scenario confirming acceptable behaviour Continue the perturbations until the scenario becomes absurd in the eyes of prospective users Jason learned about absurd usage perturbations by discussing the bug confirmation scenarios with members of the support department, training department and user community.
How I\u0026rsquo;d recommend someone learn this skill: #I often coach testers about how to \u0026ldquo;know When to Stop\u0026rdquo; testing. I start with making sure the testers have a good solid understanding of the notion of coverage. I ask them to identify at least three different coverage notions associated with their project and a good article I point them to is by Cem Kaner entitled \u0026ldquo;Negligence and Testing Coverage\u0026rdquo; which discusses over one hundred different ways to look at test coverage.
I ask testers to learn about goals and awareness of achieving them. I find the writings of Steve Covey, especially his book the \u0026ldquo;Seven Habits of Highly Effective People\u0026rdquo;, very helpful. The first habit Steve Covey teaches is begin with the end in mind, first things first.
I ask testers to look at some important examples from previous projects with different exit criteria for testing. I point them to an Acceptance Testing Case Study and a Combinations Testing Case Study.
I ask testers to learn about eliciting notions of what is good enough, or what does \u0026ldquo;Done\u0026rdquo; means. I encourage testers to interview project stakeholders and to review examples of good enough quality from past projects.
I ask testers to learn about bugs found in the field which had to be corrected from previous projects.
I ask testers to come up with a prioritization strategy for test objectives on their project.
I ask testers to review this with stakeholders to make sure it is acceptable to them and to get feedback.
I ask testers to learn about challenging their assumptions pointing them to references such as the Rapid Testing course by James Bach and Michael Bolton.
I ask testers to participate in project retrospectives in which they can see how other testers decided they had done enough testing.
Additional resources: #I am a Bug by Robert Sabourin describes that \u0026ldquo;... we know we are finished when the bugs that are left are bugs we can live with at least for now...\u0026rdquo; When Do We Stop A Test, a blog post by Michael Bolton By: Robert Sabourin
`}),e.add({id:5,href:"/docs/test-design/identifying-and-using-oracles/",title:"Identifying and Using Oracles",description:`Definition: #An Oracle is a principle or mechanism by which we recognize a problem. It is a special kind of heuristic that helps us to make a particular decision in answer to the question, \u0026ldquo;Is there a problem here?\u0026rdquo; as defined by Michael Bolton.
A context where I used this skill: #I had just joined a medium size software development company, in a team of 3 testers and 15 developers.`,content:`Definition: #An Oracle is a principle or mechanism by which we recognize a problem. It is a special kind of heuristic that helps us to make a particular decision in answer to the question, \u0026ldquo;Is there a problem here?\u0026rdquo; as defined by Michael Bolton.
A context where I used this skill: #I had just joined a medium size software development company, in a team of 3 testers and 15 developers. My role was to test a web application being developed in a hybrid-agile form where stories are not kept updated. As documentation was not updated I had no initial reference material to use to learn what the application was supposed to do and to prepare and design my tests. I used the knowledge from developers and UX as oracles as well as Michael Bolton\u0026rsquo;s FEW HICCUPS heuristics as a first step for identifying and applying oracles, while exploring the application. I found the \u0026lsquo;comparable products\u0026rsquo; a helpful oracle as there were a few competitors in the market, as well as the \u0026lsquo;history\u0026rsquo; oracle as we were replacing an old platform with a newer one. For testing of a database engine, one concern was the possibility that changing one record might also change other unrelated records. One oracle we used was self-verifying data. The data set needed to be large (100,000,000 records), so entries were generated by generating well-formed records using random numbers. The seed value for each record was embedded within the record, so after a test (or suite of tests) we were able to walk through all of the records and re-generate the expected contents for each using the embedded random number seed. - DHH Sometimes we make problem solving so challenging that we miss the obvious solution. Recently, during the first week of January of 2014, I was working with a test group that was not only remote from me but in multiple locations across a continent. On a video call to discuss some suggestions I had made, there were some questions raised about the approach and why, if we were testing a new, web-based application, would people (testers) need to be able to log into the legacy host system. I asked what they thought they should compare the data in the new system to in order to be certain it was correct? One person suggested the old web-based system that was being replaced. I asked what the data source was for that system. There was a long moment of silence while the participants blinked. The person who had asked, originally, about the legacy system had a look of astonishment on her face.
Of course! The data there is correct. We simply are replicating and reporting it on the new system. We can let the old system tell us what is right or not.
How I\u0026rsquo;d recommend someone learn this skill: #There are many resources to learn about oracles (see additional resources below). Practice however, is the best way to learn how to identify them and use them. Weekend Testing is a place where testers can come and practice test skills together over Skype. In one of the Weekend Testing sessions, we concentrated in testing with a focus on using oracles. We used FEW HICCUPS as the starting point for identifying and using oracles and testers found that helpful. Full transcript of the session can be found here. For me, this was an exercise in defining problems. The list of resources below (provided by DHH) is very good and I have referred people to several of them. Just as we learned basic addition and subtraction by checking \u0026ldquo;the answers\u0026rdquo; when we were done, now I expect it is checking the calculator) this is sometimes something similar. Each of our contexts are slightly different. For fields such as name or address that might display on a screen, I find it helpful to use some of Doug\u0026rsquo;s self-verifying data (described above and in the resources below.) I have found it helpful when creating test data to give records meaningful, easily identifiable names embedded in specific field in the data. Trial and error, and awareness of context, helped me refine my test data for each environment I worked in. When I needed legitimate addresses, I used addresses of some of my favorite restaurants. If they appear correctly, then I know they are correct.
Additional resources: #Problems with Problems by Michael Bolton The Oracle Problem and the Teaching of Software Testing by Cem Kaner Self-Verifying Data by Noel Nyman \u0026ldquo;Testing Computer Software\u0026rdquo; by Cem Kaner, et. al. Analysis of the Taxonomy of Test Oracles by Doug Hoffman Nine Types of Oracles by Doug Hoffman Self-Verifying Data by Doug Hoffman Word of the Week: Oracle by JCD By: Pete Walen
`}),e.add({id:6,href:"/docs/community/community-building/",title:"Community Building",description:`Definition: #Community building is a field of practices directed toward the creation or enhancement of community among individuals within a regional area (such as a neighbourhood), within a company or with a common interest.
A context where I used this skill: #The testers in my company do not exist within a single testing department, and are embedded across the company within project teams. This led to much silo\u0026mdash;ing of experiences, information and solutions.`,content:`Definition: #Community building is a field of practices directed toward the creation or enhancement of community among individuals within a regional area (such as a neighbourhood), within a company or with a common interest.
A context where I used this skill: #The testers in my company do not exist within a single testing department, and are embedded across the company within project teams. This led to much silo\u0026mdash;ing of experiences, information and solutions. To address this issue, and to generally encourage our testers to communicate with one another, we started \u0026ldquo;Testers Teas\u0026rdquo;. These are short meetings, to which all testers are invited, and attendance is optional. The goal of the Testers Tea is to get testers together and talking. We have had many formats for these gatherings including Lean Coffee, videos, games, presentations. The key is keeping the tester meetings fresh and mixing it up. I\u0026rsquo;ve tried to make sure there is a practical element to the meeting, something that gets them thinking. For example, I\u0026rsquo;ve given them the challenge to test the \u0026ldquo;Easy button\u0026rdquo; before discussing it then showing them the James Bach video. The level of engagement since the new format testers teas has risen in a few testers, and they look forward to the next session! It\u0026rsquo;s also an opportunity for testers to give presentations or summaries of events/training they\u0026rsquo;ve attended. \u0026mdash;\u0026mdash; Chris George.
Another experience I\u0026rsquo;ve had is creating the a regular Lean Coffee event in Cambridge, UK. The purpose of this is to get testers from around Cambridge together to discuss testing. This requires minimal organisation, but has resulted in some really great conversations and built relationships between a few companies. \u0026mdash;\u0026mdash; Chris George.
Similar to Chris\u0026rsquo;s experience, I also had a need to get our testers to communicate with one another more. The biggest difference in my case is that I wanted to try and spread knowledge and ideas between testers at my company, as well as in the region. To help bring testers together internally, we started running \u0026ldquo;Testing Chatter\u0026rdquo; events. These are K\u0026mdash;Card facilitated discussions on predefined topics. We also have run several game nights where we play things like Zendo, Set, the dice game, Art Show and others to bring the testers together all while possibly improving their attention to detail and creativity. To get testers outside of my company to meet and share ideas, I created the NOTiCE (Northern Ohio Testers in Collaborative Engagement) meetup. The majority of our meetings have had one or more defined topics, but the most successful session allowed attendees to bring their own topics (similar to Lean Coffee but less structured). I also joined the board of NOSQAA (Northern Ohio Software Quality Assurance Association) to help drive the programs offered in a direction I think will be beneficial for the testing community in the region. \u0026mdash;\u0026mdash; Erik Davis
How I\u0026rsquo;d recommend someone learn this skill: #Firstly gauge interest amongst your target group, and simply run a kick off meeting. Agree as a group what they want to get out of it, format and duration. The next stage is to simply organise and run a session, investigate the Lean Coffee method as a possible facilitation method. Look up games for software testers, there are lots of resources scattered around for dice games, black stories, games that demonstrate the need for solid requirements etc.
Persistence is also key to this. If you only get a few people turn up, that\u0026rsquo;s ok, they want to be there. Keep at it and keep it fresh. It\u0026rsquo;s important to review the sessions as a group, and adapt to do what\u0026rsquo;s best for the group.
Additional resources: #http://leancoffee.org/ The Birth of a Tester Gathering Part 1, Part 2, Part 3 and Part 4 By: Erik Davis and Chris George
`}),e.add({id:7,href:"/docs/critical-thinking/aristotelian-and-predicate-logic/",title:"Aristotelian and Predicate Logic",description:`Definition: #A formalization of thinking, similar to the way in which geometry formalizes drawing. The classic logical statement is:
All Men Are Mortal.
Socrates was a man.
Therefore, Socrates was mortal.
This form of statement is called a syllogism. From these basic building blocks is it possible to analyze statements for validity. For example: I went to the store and I did not go to the store is not true \u0026mdash; or \u0026mdash; at best \u0026mdash; it may be nonsense.`,content:`Definition: #A formalization of thinking, similar to the way in which geometry formalizes drawing. The classic logical statement is:
All Men Are Mortal.
Socrates was a man.
Therefore, Socrates was mortal.
This form of statement is called a syllogism. From these basic building blocks is it possible to analyze statements for validity. For example: I went to the store and I did not go to the store is not true \u0026mdash; or \u0026mdash; at best \u0026mdash; it may be nonsense.
On top of simple transformations, this kind of logic includes the ability to spot items that take the form of a syllogism but are invalid, as well as predicate logic, where ideas in a paragraph may be converted to symbols and evaluated. The symbolic logic version of the \u0026ldquo;going to the store\u0026rdquo; example is A AND (NOT A), which can not evaluate to true.
As every conclusion is false, regardless if A is true or false, the total statement must be false. This is a trivial example, but knowing how to do symbolic logic can be incredibly powerful when evaluating more complex prose, like requirements or combinations of inputs.
A context where I used this skill: #I was consulting with an ecommerce company that allowed its users to create a custom catalog. We found we had several different possibilities \u0026mdash; the customer catalog could exist, it could be inactive, out of date, the user might not be signed up for regular catalog access, and so on. We held a meeting before the code was created and I took the requirements, which were in plain English, and turned them into a table. For every possibility in the table we created a user who had those conditions, so the developers could \u0026lsquo;poke\u0026rsquo; test before turning the system over to the testers. Through this process we found entire \u0026lsquo;boxes\u0026rsquo; in the table that had no pre\u0026mdash;defined correct behavior!
Result: Thanks to the decision table, we got better results out of the gate, could test more quickly, and had more confidence in our coverage. (To the extent that such a term has a meaning). Creating the decision table was easy, but seeing the symbols pop up in my mind \u0026mdash; the idea to create the table \u0026mdash; that came through practice.
How I\u0026rsquo;d recommend someone learn this skill: #My senior year in high school I took a course in Logic at Hood College at night. It was fantastic. The book we used for the course was Harrison\u0026rsquo;s Logic and Rational Thought. I would suggest a quick Google search and some reading on symbolic logic, predicate logic, and Aristotelian logic. The Great Courses have a course on reasoning that covers Aristotelian logic through predicate;; it looks interesting.
Additional resources: #Strategy and Logic of Argumentation, Great Course Summary on YouTube By: Matthew Heusser
`}),e.add({id:8,href:"/docs/communication/chartering/",title:"Chartering",description:`Definition: #A charter is a brief statement of what should be tested, how it should be tested, and problems that should be looked for, with the objective of having a clear mission for the session. The skill here, is to create a good charter quickly that both guides and plans the testing. The skill involves: thinking, planning, creativity, tests design, and likely writing.
A context where I used this skill: #I was working in a testing group of 10 people on a pricing science web application.`,content:`Definition: #A charter is a brief statement of what should be tested, how it should be tested, and problems that should be looked for, with the objective of having a clear mission for the session. The skill here, is to create a good charter quickly that both guides and plans the testing. The skill involves: thinking, planning, creativity, tests design, and likely writing.
A context where I used this skill: #I was working in a testing group of 10 people on a pricing science web application. Historically, at this company, testing was a highly scripted activity. Testers, developers, and product managers would plan a sprint and do design work, and after that, developers would go off and develop and testers would go off and start writing test cases. After a couple years of existence, maintenance of the previously documented tests became a non\u0026mdash;trivial activity to the extent that sprint time had to be allocated to make old no longer valid tests relevant again. The group I was working with also noticed that most issues found were not from running the documented test again. Chartering was effective for us in the sense that we were able to spend more time testing software and that the documentation came to represent the testing that actually happened. \u0026ndash; Justin Rohrman.
I find the idea of test chartering to be closely related to defining test objectives. Where determining test objectives is a fairly high level concept, the test charter addresses how we intend to test these points of interest. The challenge is to get people to understand why something is important. I use pairing a great deal in determining charters to help reduce bias in perspective. \u0026ndash; Pete Walen.
How I\u0026rsquo;d recommend someone learn this skill: #Start by reading: Chapter 2 of Explore IT by Elisabeth Hendrickson is devoted to the topic of chartering as well as its application in exploratory testing. Slide 22 of the Exploratory Testing PDF from Michael Bolton provides a clear definition.
Next creating charters is a learned\u0026mdash;practice skill. By this, we mean the tester must write a charter, may be get it reviewed, and then use the charter in test. Next: wax on, wax off, over and over. Also, it can be very useful to do pair testing with someone who is good at doing a charter. Do the charters and testing rapidly. And do not be afraid to make mistakes, but when you do make a mistake, learn from it.
Note: on the net, there are many example charter formats and contents. These are only starting point examples to learn from. You should create (think) your own charter.
Additional resources: #Consider the section on \u0026ldquo;The Mission of Testing\u0026rdquo; from BBST Exploratory Testing Explained (see information on charters) Exploratory Testing By: Pete Walen and Justin Rohrman
`}),e.add({id:9,href:"/docs/test-design/quick-attacks/",title:"Quick Attacks",description:`Definition: #Quick attacks are a collection of methods that you can use to begin testing immediately, without much understanding of what software is supposed to do or the underlying business requirements. Most quick attacks are broad and shallow, based more on the commonly-known ways a platform can fail than any knowledge of the underlying application. Examples of quick attacks include putting numbers too large, too small, or too precise in text fields, entering numbers where text is expected, and so on -- forcing what seems like exceptions to the usual process to see if the programmer wrote code to handle those exceptions.`,content:`Definition: #Quick attacks are a collection of methods that you can use to begin testing immediately, without much understanding of what software is supposed to do or the underlying business requirements. Most quick attacks are broad and shallow, based more on the commonly-known ways a platform can fail than any knowledge of the underlying application. Examples of quick attacks include putting numbers too large, too small, or too precise in text fields, entering numbers where text is expected, and so on -- forcing what seems like exceptions to the usual process to see if the programmer wrote code to handle those exceptions.
A context where I used this skill: #I came into a test as a consulting software tester on day one; there was some concern if I was going to be a little academic. I believe the request (mostly from programmers, not testers) was for \u0026ldquo;Doing of testing with coaching as a bonus, not the other way around. \u0026ldquo;It\u0026rsquo;s a fine thing to ask, and I accepted the job, and the rate was fine -- I am not complaining. I will admit a little anxiety. So we start on day one. The application was complex; the documentation was slim to none. The little documentation that did exist was trapped in a quality management system and consisted of step-by-step directions - not an overview of what the system was or how it worked. Most of the teams legacy applications worked by reading from a database (or a flat file) and doing some processing; the challenge of the day was to take those service, wrap them, and allow customer service to make hand changes by way of a GUI, so I tried quick attacks - sending in data through the GUI that was horribly wrong, or doing things in a different order than the programmer expected. I found a moderately large defect by lunch that was a reasonable activity for a customer service person, and would have caused significant downstream problems had the bug survived in the wild. Come to think of it, that\u0026rsquo;s a decent build credibility story, isn\u0026rsquo;t it?
How I\u0026rsquo;d recommend someone learn this skill: #Hands On Keyboard Quick Attacks walks the reader through several exercises. It\u0026rsquo;s a common place for me to start teaching testing and provides other valuable links, worth mentioning here, like Elisabeth Hendrickson\u0026rsquo;s Testing Cheat Sheet and the article Ten Quick Attacks For Web Based Software along with a link to Triangle TestOMeter.
Additional resources: #BBST Test Design, specifically lecture 2 How To Break Web Software, by James Whittaker By: Matt Heusser
`}),e.add({id:10,href:"/docs/test-design/black-box-techniques/",title:"Black Box Techniques",description:`Definition: #Black box testing is a general label applied to design techniques used when the tester/test designer does not know or does not take into account, the software\u0026rsquo;s code, design, or other aspects of its structure.
A context where I used this skill: #Pretty much any test effort where I was not directly involved in development, I was doing some form of black box testing.
In one case, I was testing rockets.`,content:`Definition: #Black box testing is a general label applied to design techniques used when the tester/test designer does not know or does not take into account, the software\u0026rsquo;s code, design, or other aspects of its structure.
A context where I used this skill: #Pretty much any test effort where I was not directly involved in development, I was doing some form of black box testing.
In one case, I was testing rockets. We defined scenarios based on requirements and expected system\u0026mdash;software usage. The rocket would count down, lift off, fly up and away. This was our starting black box usage scenario. We ran this test over and over at first. Then we started to test \u0026ldquo;off normal\u0026rdquo; scenarios to test the boundary cases. We tested a countdown that stop just before \$T=0\$. Tested a countdown that stop right at \$T=0\$. These were boundaries where we wanted to see how the software\u0026mdash;system worked in different scenarios. We of course had many other cases. We once counted up how many \u0026ldquo;normal\u0026rdquo; and \u0026ldquo;off normal\u0026rdquo; black box scenario cases we had tests for. About 60% of the testers were off normal (stress cases) and another 20% were \u0026ldquo;normal\u0026rdquo; but at a boundary. This means only 20 were regular \u0026ldquo;normal\u0026rdquo; tests. We were push the software, even in the black box, to situations that might not be normal, but that the software should handle without bugs.
How I\u0026rsquo;d recommend someone learn this skill: #Since the skill is made up of a variety of techniques, as tester must learn the patterns needed to implement the technique. To do this one must start with the \u0026ldquo;classic\u0026rdquo; industry recognized names of these, which include:
Equivalence partitioning Boundary value analysis Decision table testing Classification tree method Syntax testing Combinatorial test design techniques Cause\u0026mdash;effect graphing State transition testing Scenario testing Random testing A student of black box testing will recognize there are other names and variations for black box test techniques, but the names given here are the basics. To learn the skill/technique a tester must know the name, and then must be able to do the following:
recognize when the test problem fits a technique either know the technique pattern or how to find the details of the pattern to be able to apply the technique (note: tools may be needed to support a technique) once the pattern can be practiced, the tester must be able to define the test design including: a plan, the inputs, the environment of the test, the activities of the test, and be able to judge (oracle) the test. If a tester is doing scripted testing, the design happens then the testing, but if one is doing exploratory testing, the testing and design with information gathering happen in real time. To learn skill of black box test design and associated techniques, one must practice, practice, and practice as well as being able to look the pattern details up when needed.
Additional resources: #BBST classes The Domain Testing Workbook \u0026mdash; Kaner et al. \u0026mdash; (this is a comprehensive \u0026ldquo;how to\u0026rdquo; with skill building learning workbook) By: Jon Hagar
`}),e.add({id:11,href:"/docs/critical-thinking/identifying-logical-fallacies/",title:"Identifying Logical Fallacies",description:`Definition: #Understanding when the conclusions someone gives at the end of an appeal are not really supported by any claims they have made.
A context where I used this skill: #A customer of mine in Chicago outsourced a ton of testing to an offshore contract testing organization. In order to exercise changes to core business rules the outsourced testers agreed to include one positive test and one negative test for each changed rule.`,content:`Definition: #Understanding when the conclusions someone gives at the end of an appeal are not really supported by any claims they have made.
A context where I used this skill: #A customer of mine in Chicago outsourced a ton of testing to an offshore contract testing organization. In order to exercise changes to core business rules the outsourced testers agreed to include one positive test and one negative test for each changed rule. Both organizations believed this to be reasonably complete testing of the changed logic.
The outsource testing team diligently completed the work and ensured that one positive and one negative test was run, and passed against every changed business rule. The completed application went into a pilot implementation during which very high failure rates (over double that of similar previous projects) were encountered when executing transactions using the revised rules.
I studied the situation (test planning, design, implementation and reporting). I determined that both organizations were operating under the logical fallacy that one positive and one negative test would thoroughly exercise each changed business rules. Several negative tests would have been required for almost every changed business rule I examined.
Even the simplest case of a business rule with two Boolean conditions (A and B) would have required at least one positive test and three negative tests to basically exercise the business logic (this is often called full condition coverage). (note this can be demonstrated by using Demorgan\u0026rsquo;s rule in Boolean algebra).
A B T T Positive T F Negative F T Negative F F Negative How I\u0026rsquo;d recommend someone learn this skill: #First study logical fallacies, then pick up any major newspaper, turn to the editorial section, and look for them. Another related thing to look for is inconsistency of rhetoric \u0026mdash;\u0026mdash; when the person the paper likes does something, it is \u0026ldquo;leadership\u0026rdquo;, while when the opposition does it, it is \u0026ldquo;manipulation.\u0026rdquo; (Another example: \u0026ldquo;lies\u0026rdquo; vs \u0026ldquo;mistakes\u0026rdquo;, \u0026ldquo;bad word choice\u0026rdquo;, and \u0026ldquo;misunderstood.\u0026rdquo;)
If you are really motivated, get a copy of Logic and Rational Thought by Harrison and go through the books section on logical fallacies. It is exceptional and include exercises. (Robert Sabourin\u0026rsquo;s example about is close to what Harrison refers to as the fallacy of the false dilemma.)
Additional resources: #Master List of Logical Fallacies Logic and Rational Thought, Frank Harrison By: Robert Sabourin
`}),e.add({id:12,href:"/docs/communication/communicating-risk/",title:"Communicating Risk",description:`Definition: #Eloquence combines several skills, but it includes knowing how to communicate to the audience in a way that it can be heard.
A context where I used this skill: #Years ago doing programming on a project to generate insurance packets to customers. If we didn\u0026rsquo;t hit a magical deadline, the packets would be \u0026rsquo;late\u0026rsquo;, which had the perception, at least, of incredible pain \u0026ndash; people with insurance without the documentation of what the benefits were or legal proof.`,content:`Definition: #Eloquence combines several skills, but it includes knowing how to communicate to the audience in a way that it can be heard.
A context where I used this skill: #Years ago doing programming on a project to generate insurance packets to customers. If we didn\u0026rsquo;t hit a magical deadline, the packets would be \u0026rsquo;late\u0026rsquo;, which had the perception, at least, of incredible pain \u0026ndash; people with insurance without the documentation of what the benefits were or legal proof. Yes, I was writing the code, and also testing my own code.
The alternative to getting the code out was to hire an army of interns to copy values from spreadsheets into MS Word, then export to PDF. Or something. Before the process was automated, the company had done something manually, but exactly what had been lost to oral history and mysticism. Like so many other business processes, the perceived choices were \u0026ldquo;have the automated code done by (date) or (mumble something horrible about how we needed to have it done by the date.)
And, of course, the requirements were late. Changes came in late to the system. The programming was done by Matt, who, while not a junior programmer, was new to this system, and working on it part-time, in addition to other responsibilities. until it became obvious that we had a schedule problem. The code was mostly done, it was just buggy. How buggy, we didn\u0026rsquo;t know, as my testing was an expanding spiral around the code I had changed.
Suddenly, with a date problem, IT management was talking to the line of business management. The line of business management explained that it was \u0026ldquo;okay\u0026rdquo; to \u0026ldquo;take a few risks\u0026rdquo;, and I was asked if we could go-live Friday. How could I answer that? I didn\u0026rsquo;t really know how buggy the thing was.
What I did know is that Line of business management wasn\u0026rsquo;t in a position to understand the risks they were taking. If the software had a bug in a for-loop, it might send the same packet to every person. An off-by-one error could mean packets were sent to the wrong house - so personal health information from one family would \u0026ldquo;cross streams\u0026rdquo; to another family, a legal violation. A merge error might mean that families got documents that looked correct, but the actual information on them, the deductible, copay, etc, was wrong. If the copay or deductible was too low on the packet, then the person would expect this coverage at the doctor\u0026rsquo;s office, and we\u0026rsquo;d be liable to complaints and possible legal battles. And say the code has any of these bugs - how much effort would it take to change, resubmit, and recreate correct packets? What would the cost be to reprint and reship?
It turned out quite a bit.
What I endeavored to do was to move the conversation past \u0026ldquo;We are willing to take some risk here\u0026rdquo; into the realm of what those risks actually entailed.
All of a sudden management wanted to go back and look at their legal obligations to ship packets, and I got a couple of more weeks for my schedule.
How I\u0026rsquo;d recommend someone learn this skill: #Offer to the be point person in making the ship decision. If you can\u0026rsquo;t do that, try to be in the room. If your organization ships so often, and rollback is so easy, that you don\u0026rsquo;t have those sorts of meetings, that\u0026rsquo;s fine - work on requirements definition or the portfolio. At the portfolio level, every decision on what to spend time is a decision to not spend time on a hundred other things, and someone is eloquently arguing for the projects that win. Study that person. Move from studying to experimenting, and do it consciously.
Additional resources: #\u0026ldquo;Crucial Conversations: Tools for Talking When Stakes are High\u0026rdquo; by Patterson et al talks about how to deal with defensive and high pressure situations \u0026ldquo;How To Win Friends and Influence People\u0026rdquo; by Dale Carnegie (get the original, non-update version), talks about how to send a message that will resonate with your audience By: Matt Heusser
`}),e.add({id:13,href:"/docs/test-design/white-box-techniques/",title:"White Box Techniques",description:`Definition: #White Box Testing is a general label applied to design techniques used when the tester/test designer knows and takes into account the software\u0026rsquo;s code, design, and other aspects of its structure. This is not a properly a skill. It is a label for techniques that incorporate many skills within the broader skill of designing meaningful tests.
A context where I used this skill: #When I was a developer \u0026mdash; tester (now called an Agile developer), I iteratively built design, code, and test information.`,content:`Definition: #White Box Testing is a general label applied to design techniques used when the tester/test designer knows and takes into account the software\u0026rsquo;s code, design, and other aspects of its structure. This is not a properly a skill. It is a label for techniques that incorporate many skills within the broader skill of designing meaningful tests.
A context where I used this skill: #When I was a developer \u0026mdash; tester (now called an Agile developer), I iteratively built design, code, and test information. Yes I did the code and then tested, so I was not pure Agile TDD, but every line of code had tests for it. This gave me statement coverage.
Also, each \u0026ldquo;IF\u0026rdquo; test had a truth table from which I build more test cases. This gave me decision and branch coverage. Well with the coverage based white box testing, my code had few bugs than other developers and I was invited back during system integration to \u0026ldquo;help\u0026rdquo; when other developers were not (I had job security).
How I\u0026rsquo;d recommend someone learn this skill: #Understand what white box testing means as a technique, and then learn how to either read or write code. Here are the classic white box code coverage techniques:
Statement Testing Branch Testing Decision Testing Branch Condition Testing Branch Condition Combination Testing Modified Condition Decision Coverage (MCDC) Testing Data Flow Testing Each of these have coverage measures associated with them. There are subtle little problems in coverage measurement and a coverage can \u0026ldquo;mislead\u0026rdquo; and miss bugs. For example consider the line of code.
x = y/z I can test this with setting y = 4 and z = 2. My answer is 2 (this is the oracle), but consider there is still a bug here possibly. What if I set z = 0? What does the computer do with something that is math undefined? Is there a \u0026ldquo;IF\u0026rdquo; test or some language feature to protect z from being zero? So there is more to this skill\u0026mdash;technique than just coverage.
Additional resources: #\u0026ldquo;Software Test Attacks to Break Embedded and Mobile Software\u0026rdquo;, Jon Hagar, 2013 Ch 2 developer attacks, CRC press By: Peter Walen
`}),e.add({id:14,href:"/docs/critical-thinking/critical-thinking/",title:"Critical Thinking",description:`Definition: #Analysis and evaluation to form judgement and reasoned conclusions.
A context where I used this skill: #While I do use this tool set all the time, allow me to provide one concrete example. I came into a project that involved a computer\u0026mdash;to\u0026mdash;computer system in which the data was generated by a user in a name\u0026mdash;value pairing that our system would interpret. I came into the project after another tester had developed a web page to send these values in an automated fashion and save those test values to a database.`,content:`Definition: #Analysis and evaluation to form judgement and reasoned conclusions.
A context where I used this skill: #While I do use this tool set all the time, allow me to provide one concrete example. I came into a project that involved a computer\u0026mdash;to\u0026mdash;computer system in which the data was generated by a user in a name\u0026mdash;value pairing that our system would interpret. I came into the project after another tester had developed a web page to send these values in an automated fashion and save those test values to a database. I didn\u0026rsquo;t know much about the project so I started asking questions. I asked how he could detect duplicate test cases were entered. He said that was done manually. I asked how he intended on knowing what was tested. He said he would read the output of the tests. I asked how that would help and he said he could tell from the response what was sent in. I asked what if the test failed. He didn\u0026rsquo;t know what he would do then. I asked what validation was being done. He said that was manually done with no validation. I kept asking questions, and kept finding that the testing did nothing, as there was no way to know what was being tested. Ultimately, we scrapped the entire project as it was not built in a useful manner. I wouldn\u0026rsquo;t have known that the testing wasn\u0026rsquo;t useful until I had asked in depth questions along with follow up questions.
How I\u0026rsquo;d recommend someone learn this skill: #There are many sub skills within the process of critical thinking. Some involve positive elements such as investigation and some involve negative elements such as finding biases. When looking at a knowledge source, consider what the purpose the author intends. In marketing work, consider how it might affect you emotionally, and why the author would do that. Ask where the data came from and check that data to validate or invalidate the conclusion. Now once you find you can start asking interesting and in depth questions from other sources, ask these same questions about your own work. Why should the developers fix that bug? What is the purpose of this test report? What value do I gain from asking this question of the product owner and is there a more effective way to ask the question? What assumptions are built into my question and are they reasonable? Keep asking questions and when you run out of questions start looking for new questions to ask. Adapt your process and investigate, look for bias and assumptions (including your own). Read David Levy\u0026rsquo;s Tools for Critical Thinking book.
Additional resources: #Tools for Critical Thinking: Metathoughts for Psychology by David Levy Critical Thinking: Basic Questions \u0026amp; Answers by The Foundation for Critical Thinking Critical Thinking by Wikipedia By: JCD
`}),e.add({id:15,href:"/docs/communication/engaging-the-audience/",title:"Engaging the Audience",description:`Definition: #Engaging the audience can be the difference between a great and a poor presentation, and involves not only the content, but many social skills too.
A context where I used this skill: #Presenting is something fairly new to me, and something I\u0026rsquo;ve shied away from for many years due to my stammer. My fear was I would not engage the audience, in fact my fear was the exact opposite, I would make the audience disengaged as I spluttered my way through a presentation.`,content:`Definition: #Engaging the audience can be the difference between a great and a poor presentation, and involves not only the content, but many social skills too.
A context where I used this skill: #Presenting is something fairly new to me, and something I\u0026rsquo;ve shied away from for many years due to my stammer. My fear was I would not engage the audience, in fact my fear was the exact opposite, I would make the audience disengaged as I spluttered my way through a presentation. Nevertheless, I felt I had a story to tell and so set about learning more about presentation skills. I attended a short presentation skills course which gave me some tips to planning the presentation, and some tips about engaging the audience. I managed to get a session accepted at Agile Cambridge in the UK So armed with this training, and having planned (and rehearsed many times!) my presentation, the time came to deliver.
Something I vowed I would never do is give a long bio at the start, because I really dislike that in presentations, and makes me switch off. So no introduction, just launched straight into it. The presentation had a chronological format, going through the decades starting at 1968. The first question I asked was \u0026ldquo;who remembers 1968?\u0026rdquo; which immediately elicited a response. I swiftly followed this up with some facts including that Steve Jobs was still in high school, which draw some laughs from the audience.
I was pretty happy with the engagement I was getting, but the moment I remember most was when I got to the 80s, and asked the audience another question. C64 or ZX Spectrum. This draw a very emotional response from the audience, and reignited the deep rooted rivalry that existed in the 80s. Throughout the rest of the presentation, I tried to keep it lighthearted and natural. I personally much prefer listening to someone who is just talking, rather than someone who has their game-face on. I also tried to keep eye contact with various people around the room. I generally find this very difficult (as do a lot of people), but it really made a difference, allowing me to express myself on a more personal level.
Overall, I felt the presentation was a reasonable success, but I was really pleased with the reactions I got from the audience. If I had not have put in the humorous lines, the asking the audience bits and the nostalgic references, it would have been a different experience.
How I\u0026rsquo;d recommend someone learn this skill: #This is a good introduction to soft skills required for good presentations: Engage the Audience Presentation Skills Workshop
Content is the other engaging factor. Your slide deck can make or break the presentation. Remember, less is more and it is YOU who is presenting the information, not the projector!
For some examples of what NOT to do, watch Life after death by Powerpoint by Don McMillan.
Additional resources: #Skills Workshop Toastmasters International provides a way to do deliberate practice for presentations By: Chris George
`}),e.add({id:16,href:"/docs/communication/managing-expectations/",title:"Managing Expectations",description:`Definition: #Seeking to prevent disappointment by establishing in advance what can realistically be achieved or delivered by a project, undertaking, course of action, etc.
A context where I used this skill: #Expectation Management is something I use 24 by 7 at work or life in general. But allow me to give a particular example that also highlights the cascading impact that expectations can have on product sales.
There was this Product development firm for which our team was performing \u0026ldquo;independent\u0026rdquo; testing.`,content:`Definition: #Seeking to prevent disappointment by establishing in advance what can realistically be achieved or delivered by a project, undertaking, course of action, etc.
A context where I used this skill: #Expectation Management is something I use 24 by 7 at work or life in general. But allow me to give a particular example that also highlights the cascading impact that expectations can have on product sales.
There was this Product development firm for which our team was performing \u0026ldquo;independent\u0026rdquo; testing. We were hired as external test team on contract. We were working with the product manager to test the different features of their \u0026ldquo;Sales Tracker\u0026rdquo;. The product was supposed to track the activities of the sales team members of the product in terms of their planned and actual customer visits, the sales leads generated, potential and actual sales, calls dropped , calls missed, Call service optimization, analytics and reports client wise / business unit wise / location wise / product wise etc.
The initial version of the product was supposed to have all the wonderful reports and analytics along with the other features. The next version was to come up with call route optimization and have availability on cloud.
As we started to test, we found that the application was not able to process the volume of data that it was receiving from all the sales teams. Also, there was quite a delay in receiving the data from remote areas to the central server. All of this was causing analytics to provide incomplete real time analytics and reports to fail. Reports would start processing the data but would hang before getting fully loaded.
The same was communicated to the product manager by the test team as simply as \u0026ldquo;analytics and Reports not working\u0026rdquo;. Specific issues were logged as defects and bought up in the status meetings with the product team. The risks of potential delay got discussed at length. Test team did make a strong attempt to recalibrate the expectations. Product team was however, under heavy pressure from the sales team to deliver on time. The Product team did not push back and inform the reality. Instead it communicated the sales team as \u0026ldquo;analytics and reports not working fully\u0026rdquo;. Test team could have involved Sales team in their status meeting. The sales team knew that these modules were critical and part of key success factors. However, they concluded that incomplete components can be completed in an interim release, sometime before the next version. They were adamant on the release date. They also escalated on Product team for not delivering as planned. What they never did was analyze the potential risk and inform the buyers about the same.
Once the product was launched - the customer feedback got much worse. There were huge complaints on what was promised and what was delivered. It wasn\u0026rsquo;t surprising at all to see sales drop as reporting and analytics were very critical to customers and were identified as key success factors from the start.
How I\u0026rsquo;d recommend someone learn this skill: #Expectations cannot be obvious to one and not the other. Very first step towards expectation setting is to know and accept the reality in terms of team capabilities, constraints, dependencies and risks we are working with. Get involved early in the life cycle. Make sure you spend enough time with the senior management to understand key success factors of the project, so that each time there is a new risk identified or change in existing risk situation, one can go back and look at the impact on these key success factors.
Over communication does not exist \u0026ndash; so involve all stake holders in discussions. Have milestones and reminders for them. Have standup calls, status meetings etc. , to communicate potential pain points or status in general and discuss way forward. Set priorities for what is important, so it\u0026rsquo;s easy to get attention of all stake holders if something critical needs attention. The entire purpose of expectations management is to set real expectations which may not be a very good news to hear sometimes. But it\u0026rsquo;s very important to communicate the bad news too with appropriate supporting details. Also, it\u0026rsquo;s important at such times to not fall in trap of sugar coating a lot and ending up setting incorrect expectations again. You may need to push back some of your team members in order to keep them from saying what the management wants to hear and make them accept reality and speak it.
Additional resources: #By: Smita Mishra
`}),e.add({id:17,href:"/docs/test-design/risk-prioritization/",title:"Risk Prioritization",description:`Definition: #The process of \u0026lsquo;creating\u0026rsquo; a list with identified and analyzed risk items which is ordered on its risk exposure. See also the following related sections in this documents:
Classify the impact of the risk (e.g. High, Medium, Low) Classify the probability of the risk (e.g. High, Medium, Low) Perform criticality ordering of the composite risk list , e.g. High severity and High probability would be tested, while a Low severity and low probability would not be tested A context where I used this skill: #I used this during the test impact, when I created a list with identified and analyzed risk items.`,content:`Definition: #The process of \u0026lsquo;creating\u0026rsquo; a list with identified and analyzed risk items which is ordered on its risk exposure. See also the following related sections in this documents:
Classify the impact of the risk (e.g. High, Medium, Low) Classify the probability of the risk (e.g. High, Medium, Low) Perform criticality ordering of the composite risk list , e.g. High severity and High probability would be tested, while a Low severity and low probability would not be tested A context where I used this skill: #I used this during the test impact, when I created a list with identified and analyzed risk items. Each risk item get a priority \u0026lsquo;assigned\u0026rsquo; based on its risk exposure. Risk exposure is defined by the relationship of Probability and Impact What you need to do.
Consider what can go wrong that can influence the project Determine what the most likely outcome would be \u0026ndash; Impact, Consequences Determine how likely those consequences are \u0026ndash; Probability, Likelihood Calculate the risk exposure i.e. Impact * Probability Action can be taken based on risk exposure, i.e. priority How I\u0026rsquo;d recommend someone learn this skill: #Just take average situations in life. Consider what can go wrong for that situation. Determine the probability and impact based on the information you have at that moment. With a \u0026ldquo;value\u0026rdquo; for probability and impact, you can \u0026lsquo;calculate\u0026rsquo; the risk exposure.
Additional resources: #Prioritization \u0026mdash; Making Best Use of Your Time and Resources \u0026mdash; See more at Mindtools By: Simon Peter Schrijver
`}),e.add({id:18,href:"/docs/test-design/identifying-combinatorial-explosion/",title:"Identifying Combinatorial Explosion",description:`Definition: #The combinatorial explosion is the list of potential test ideas based on some model of the system. Combination testing is about picking a few tests that can teach us what we need to know about the space of combinations of these variables.
A context where I used this skill: #Recently, while working on a project that involved a table change to add new languages available as \u0026ldquo;preferred languages\u0026rdquo; in a registration module for a shopping system we saw several potential problems.`,content:`Definition: #The combinatorial explosion is the list of potential test ideas based on some model of the system. Combination testing is about picking a few tests that can teach us what we need to know about the space of combinations of these variables.
A context where I used this skill: #Recently, while working on a project that involved a table change to add new languages available as \u0026ldquo;preferred languages\u0026rdquo; in a registration module for a shopping system we saw several potential problems. The test group was repeatedly told that there were no code changes made, testing should be fairly easy. On examining the number of areas where that table was referenced simply for registration and profile maintenance it seemed more complex. It was invoked from a desktop webpage, a mainframe green screen (user customer service staff) and mobile applications on iOS and Android. Given the number of languages being added and the number of forms, emails and other impacted customer facing integration points, I mapped the existing and new language combinations across the application. There were four (4) new languages being added to the original two (2). This, given the other interacting variables gave a potential of 366 combinations of variables and resulting potential test instances for the web UI and green screen modules alone. Mobile apps had an additional 120 variable combinations to consider. By evaluating the combinations, I was able to reduce the desktop tests to 41 and mobile tests to 14. These found over 20 bugs that would prevent the software from working. Two more bugs were found after deployment in areas I had no idea were touched by the change.
How I\u0026rsquo;d recommend someone learn this skill: #I found the ideas from Cem Kaner (here: Examples of Combination (Multi-Variable) Testing) helpful in understanding how to do this and explain it to others.
Additional resources: #All Pairs By: Pete Walen
`}),e.add({id:19,href:"/docs/communication/note-taking/",title:"Note Taking",description:`Definition: #Note taking is the skill of accurately and effectively capturing information from some source(s).
A context where I used this skill: #I use note taking often and in many different formats such as on paper, in text files residing on a computer, and in mind maps. I use this most frequently for trying to figure out how to reproduce difficult to reproduce issues in software. In one role, I was working on a native iPad app that was in its early stages and suffering from memory management issues that would result in crashing software.`,content:`Definition: #Note taking is the skill of accurately and effectively capturing information from some source(s).
A context where I used this skill: #I use note taking often and in many different formats such as on paper, in text files residing on a computer, and in mind maps. I use this most frequently for trying to figure out how to reproduce difficult to reproduce issues in software. In one role, I was working on a native iPad app that was in its early stages and suffering from memory management issues that would result in crashing software. These crashes would occur occasionally in test but there was no obvious pattern. By recording and later referencing notes, I was able to slowly arrive at a repeatable way to trigger the memory problem and cause the crash to occur.
The notes taken were useful for the process of isolating the behavior which was triggering a memory problem as well as later recording the information in the form of a bug report.
How I\u0026rsquo;d recommend someone learn this skill: #I developed my note taking skills by taking notes and then assessing their usefulness. This is a sort of self-referencing feedback. If the note are not useful to you, think about why and change your approach slightly next time. There are also specific aspects of note taking, such as sketching and exploratory testing session notes, that can be developed.
Additional resources: #Rapid Reporter by Shmuel Gershon An Exploratory Testers Notebook by Michael Bolton By: Justin Rohrman
`}),e.add({id:20,href:"/docs/communication/rhetoric/",title:"Rhetoric",description:`Definition: #The ability to converse, written or verbally, in a powerful, persuasive way, particularly using examples and figures of speech to make a case.
A context where I used this skill: #I was talking to a release manager at lunch. The project was, for the company, pretty big \u0026mdash; perhaps 200 person\u0026mdash;years and 24 calendar months, perhaps a bit larger. The team was trying scrum, but the \u0026rsquo;test\u0026rsquo; process was spiraling out of control, or at least, was in danger of spiraling.`,content:`Definition: #The ability to converse, written or verbally, in a powerful, persuasive way, particularly using examples and figures of speech to make a case.
A context where I used this skill: #I was talking to a release manager at lunch. The project was, for the company, pretty big \u0026mdash; perhaps 200 person\u0026mdash;years and 24 calendar months, perhaps a bit larger. The team was trying scrum, but the \u0026rsquo;test\u0026rsquo; process was spiraling out of control, or at least, was in danger of spiraling. I took my spoon and waved it around like a magic wand, and said \u0026ldquo;Say I have a magic wand that makes testing free. And we\u0026rsquo;ve got buggy software. So I wave my wand and tell you the status. You get a bunch of bug reports. The programmers fix the bugs. I wave my wand again, we now have less bugs (we hope) and we fix. Then I wave my wand again\u0026hellip; we\u0026rsquo;ve made the test process free, but we\u0026rsquo;ve still got the fixing process. Plus figuring what to build and building haven\u0026rsquo;t experienced any drop in cost. So the overall project cost savings might be, what? 10 percent? And while I do have my moment, I doubt I\u0026rsquo;ll ever be able to make testing free. Which means if we put me on the project, we\u0026rsquo;ll have, at most, realistically, a 5% decrease in cost, or a moderate increase in throughput. I think you want more than that. To do that, we\u0026rsquo;ll have to work on the whole process \u0026mdash; identify bottlenecks and waste, prevent failures and rework, and shift resources to alleviate the bottleneck. If we can do that, we can often see increases in throughput more like 50% \u0026mdash; and that accordion effect, where test is working on something that \u0026rsquo;ended\u0026rsquo; 3 iterations ago? That can go away.\u0026rdquo;
I got the contract, and the opportunity to try my ideas on the whole process \u0026mdash; not just in test.
How I\u0026rsquo;d recommend someone learn this skill: #Read great literature. Yes, Aristotle and Plato, but also Shakespeare, Huxley (Brave New World), and even Ayn Rand (Atlas Shrugged). You don\u0026rsquo;t have to agree with Rand, but do study what makes her so persuasive.
Speak publicly, even in small groups, to make a case for something you want, and ask for feedback on how you do. Start small and build up.
Remember to be friendly, strong and use some arguments (but still be positive so no name calling). Another way to improve this skill is in debates.
Additional resources: #This skill is similar to Eloquence, Communicating Risks, which you might think of as a special kind of rhetoric. Your Brain at Work, by David Rock, contains a list of social and emotional triggers to voice when trying to convince someone of something. By: Matthew Heusser
`}),e.add({id:21,href:"/docs/test-design/establishing-test-objectives/",title:"Establishing Test Objectives",description:`Definition: #Test objectives are the types of information we wish to learn about the software we are going to test.
A context where I used this skill: #The challenge is to understand what the stakeholders are aware of and how their understanding may be self-limiting. We as testers need to be aware of more than the simple, easy to define things we can provide to them. We need to understand their needs at least as well as theirs so we can explain what the implications of each \u0026ldquo;objective\u0026rdquo; is.`,content:`Definition: #Test objectives are the types of information we wish to learn about the software we are going to test.
A context where I used this skill: #The challenge is to understand what the stakeholders are aware of and how their understanding may be self-limiting. We as testers need to be aware of more than the simple, easy to define things we can provide to them. We need to understand their needs at least as well as theirs so we can explain what the implications of each \u0026ldquo;objective\u0026rdquo; is. The most commonly defined objective is to verify or validate requirements. For some projects this is adequate. Others may take us to work with and understand the needs of the stakeholders and help them appreciate those that are possible.
For me, I spend a fair amount of time talking with business and customer representatives about how they expect the software to behave and what it is they hope to gain from the changes. This gives me the opportunity to go more in depth into the question of \u0026ldquo;Why are we doing this?\u0026rdquo; than simply considering what the written documentation provides. This in turn gives them language and understanding to see there are many things that testing can provide beyond \u0026ldquo;verify the requirements. \u0026quot; When this is understood, I can work with project stakeholders to help them define what it is they want testing to do for this project.
Note: Test objective can relate and tie to: scope, risk (see risk skills), product, quality and management items (e.g. cost and schedule). A tester will likely have to balance these in determining test objectives. For example, we do not want to set objective to test low risk quality factors that we do not have schedule and budget to support.
How I\u0026rsquo;d recommend someone learn this skill: #Many models that try define \u0026ldquo;good testing\u0026rdquo; focus on validating requirements. Requirements can be vague and prone to misunderstanding. If a tester takes that as their default position, that they tested the requirements, that may be adequate for some companies and keep them out of trouble. Testing requirements, however, is a small part of what testing, even with new software, is really about. The most useful tool I have found in most situations, is to have an informal conversation (like over coffee or lunch) with a product owner or subject matter experts involved in the project and ask them what they are really interested in learning about the software. This may be asked as \u0026ldquo;What is it you hope this software will do after the changes that it won\u0026rsquo;t do now?\u0026rdquo; For other circumstances, for example, software in regulatory controlled environments, that question may be asked as \u0026ldquo;What is it that you are most concerned about with this software?\u0026rdquo; Usually, the answers have nothing to do with requirements.
Additional resources: #BBST Foundations Lecture 2a BBST Foundations Lecture 2b By: Jon Hagar
`}),e.add({id:22,href:"/docs/communication/speaking-about-testing-to-nontesters/",title:"Speaking About Testing To NonTesters",description:`Definition: #The ability to talk about testing with non-testers is a skill that enables tester to explain his ideas about testing in such a way that they are well received, regardless of what technical, philosophical or professional background the other person possesses.
A context where I used this skill: #1. Stakeholder management #There was a concerned raised by our users/business that defects reported by the QA team are more related to technical details of the build and not related to business use, or functionality related failures etc.`,content:`Definition: #The ability to talk about testing with non-testers is a skill that enables tester to explain his ideas about testing in such a way that they are well received, regardless of what technical, philosophical or professional background the other person possesses.
A context where I used this skill: #1. Stakeholder management #There was a concerned raised by our users/business that defects reported by the QA team are more related to technical details of the build and not related to business use, or functionality related failures etc.
Case analysis:
Interaction gap: In my current project, we are a team of 4 testers which provides its services to 7 development teams. There is no direct interaction between Users/Business and testing team because of location constraint (yes, we are an offshore team) but users work closely with Dev leads from requirement specification to solution implementation phase including the planning for release date.
QA not involved in planning/No early engagement: While planning for release date, QA timelines were getting decided by Users and Dev lead, assuming some regression scope and testing of newly build features (change requests, defect fixes etc.).
Users\u0026rsquo; and Dev lead\u0026rsquo;s incorrect notion of testing: They used to do it naturally because their notion of testing was like \u0026ldquo;It\u0026rsquo;s just a matter of running regression scripts and tests recommended by users, capture pass/fail and provide sign off\u0026rdquo;.
The Impact: The communication gap, late involvement of testing team in development resulted in \u0026rsquo;turning testers blind to what users actually want\u0026rsquo;. Testing team could never get idea of what business problems they were solving through their testing.
The Result: Result was obvious. Since builds for testing were always given with release date (which was hard to be changed), my team was getting compelled to stick with doing risk based regression and functional testing of new features with absolutely no time for focused Exploratory Testing. And because of lack of clarity for business purpose of build under test, testing team focused on \u0026ldquo;implemented solution\u0026rdquo; which used to have flaws of its own. Testing team was far away from the notion of finding information that users/business could value and consume.
How I used \u0026ldquo;speaking about testing\u0026rdquo; skill to solve this problem:
I wrote one email directly to our business users (with whom we hardly ever interacted) with above analysis above and redirected him to \u0026ldquo;Testing vs Checking\u0026rdquo; articles written by James Bach, Michael Bolton as well as Iain McCowatt.
I helped them understand that we too are eager to find information they would value but they must understand how we need to test in order to make it happen. What challenges we were facing and what could be done to solve it.
Technically speaking, below are the supporting skills that helped me in this particular context:
Courage to speak up and taking a stand for testing \u0026ndash; One can either become people pleasure or can do good testing. I chose to embrace the latter.
Use of References and Resourcefulness \u0026ndash; Sometimes, people won\u0026rsquo;t listen to your ideas simply because they think they are your ideas. But they would usually consider them if you tell them \u0026ldquo;Experts say so\u0026hellip;\u0026rdquo; by redirecting them to credible references.
Conviction \u0026ndash; It is equally important to show conviction towards craft of testing you practice. If you compromise on your principles of good testing in order to solve problems, you will actually make them worse. You must get respected by your stakeholder if you want them to take you seriously. That respect would get developed if you know how to speak about testing.
So was the problem solved?
Indeed! But it did not just solve the problem but helped me in many more ways. Here they are:
This kind of direct interaction with our users helped them form an opinion about me as a tester who knows and practices his craft well.
They became aware of philosophy of testing which was different than theirs and which made absolute sense.
Users appreciated me for redirecting them to Testing vs checking and that is now going to contribute in our all future strategy preparations and planning.
My email has been shared with high level stakeholders in their meetings and they are glad to have a testing team which understands what real testing is. My one email (rather ability to speak about testing) solved many other problems which were difficult to be solved by mere bargain and typical discussions, otherwise.
2. Interviewing testers and getting interviewed yourself #Another context where tester\u0026rsquo;s ability to speak about testing helps is when she gets interviewed or interviews some tester for hiring in team.
Usually, project teams who are serious about testing don\u0026rsquo;t just rely on interviews conducted by testing expert but they also interview those candidates by Dev lead, Business Analysts, Support teams, cross functional teams etc.
Difficult situations occur when even expert testers can\u0026rsquo;t explain testing to people who are not testers themselves (but need testers to work with them of course). This usually happens because traditionally, tester\u0026rsquo;s mindset differs from other stakeholders\u0026rsquo; mindset and that causes the mismatch between notions of testing all of them share. As a result even very good testers get rejected in their assessment. If you know how to talk about testing you can easily deal with such situations. In fact, if you are interviewing a tester for hiring, you can assess her for same skill. Naturally, an individual who can talk effectively about testing would possess solid understanding of concepts, soft-skills and other desired personality traits.
How I\u0026rsquo;d recommend someone learn this skill: #Here are couple of things you can practice to improve your communication, especially with non-tester audience:
Practice explaining different testing concept with different number of words. For example, practice explaining Black Box testing concept with 50, 150 and 300 words each. Use word counter while doing it and see how effectively you think you are able to explain it. Take feedback from your colleagues.
Especially if your mode of communication is written, write down your thoughts and read them aloud (at-least in mind). Does anything /sound/ chaotic? Unclear? Irrelevant? Wipe it out and write it again.
Practice explaining testing and concepts by imagining how different stakeholders would take that like? For example, how would technical architect thing of your idea, how would business analyst think about it, what objections Dev lead might raise against your ideas?
Try to dig out more and more context before you pass anything as your opinion or your answer. It\u0026rsquo;s hard to read peoples\u0026rsquo; minds when we are in meetings, interviews etc. Especially in cases where people with different idea about testing speak, chances are high that communication would go hay wire. It is important to understand the context in which /they/ want you think and then share your thoughts, ideas (whatever) so that you will speak the language they will understand. Ask context revealing questions (interview them back).
Read more about testing \u0026ndash; Nothing beats learning from others\u0026rsquo; experiences. You don\u0026rsquo;t need to go through all sort of experiences yourself to solve similar kind of problems. Read testing blogs, magazines, watch videos and learn (at-least know) how others solved particular problems. Such references help you build your arguments (know why professional lawyers present past judgements by courts to support their arguments?) and mentioning good articles, discussions, papers at right places (and time) also helps you to build your credibility. You don\u0026rsquo;t need to be an expert in all things but if you know where to look for help, it does help!
Try to get better at Interactional Expertise
Additional resources: #Explaining Testing to Anybody \u0026ndash; James Bach Collins, Harry M. (2010). Tacit and explicit knowledge Chicago: University of Chicago Press. ISBN 9780226113807 Interactional Expertise Secrets of Consulting and Becoming A Technical Leader by Jerry Weinberg By: Lalit Bhamare
`}),e.add({id:23,href:"/docs/test-design/",title:"Test Design",description:"Help Doks.",content:""}),e.add({id:24,href:"/docs/communication/",title:"Communication",description:"Help Doks.",content:""}),e.add({id:25,href:"/docs/community/",title:"Community",description:"Help Doks.",content:""}),e.add({id:26,href:"/docs/time-management/",title:"Time Management",description:"Help Doks.",content:""}),e.add({id:27,href:"/docs/critical-thinking/",title:"Critical Thinking",description:"Help Doks.",content:""}),e.add({id:28,href:"/docs/management/",title:"Management",description:"Help Doks.",content:""}),e.add({id:29,href:"/docs/",title:"Docs",description:"Docs Doks.",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()